{"version":3,"file":"bundle.js","sources":["../../src/js/index.js"],"sourcesContent":["// M O D E L  ******************************************************************************************\nvar model = {\n    //---------------------------\n    oauth2email: \"\",\n    oauth2name: \"\",\n    oauth2id: \"\",\n    //---------------------------\n    // url of GraphQL endpoint = appurl + '/graphql'\n    priv_origin: null, \n    set appurl(v){\n        this.priv_origin = v\n        document.getElementById('appUrl').innerHTML = v //'&#x21E2;&nbsp;'+\n        buildSocialIcons(v+\"/oauthproviders\")\n        document.getElementById('graphqlTestLink').href = 'https://graphql-test.vercel.app/?end_point='+v+'/schema&tab_name=auth-proxy'\n    },\n    get appurl(){\n        return this.priv_origin\n    },\n    //---------------------------\n    // templatesCache keeps loaded templates, not to load them repeatedly\n    templatesCache :[],\n\n    //---------------------------\n    get logined(){\n         return (this._loginedUser != null)\n    },\n \n\n    //---------------------------\n    urlParams: new URLSearchParams(window.location.search),\n    //---------------------------\n    _loginedUser: null,\n    set loginedUser(v) {\n        this._loginedUser = v\n        if (v) {\n            document.getElementById(\"userTab\").innerText = v.username\n            // getAuthRoles(model.loginedUser.username)\n        } else {\n            document.getElementById(\"userTab\").innerText = \"\"\n        }\n        refreshApp()\n    },\n    get loginedUser() {\n        return this._loginedUser\n    },\n\n    //---------------------------\n    _selfRegAllowed: false,\n    set selfRegAllowed(v) {\n        this._selfRegAllowed = v\n        if (v) {\n            showElements(\"#selfRegButton\")\n            showElements(\"#selfRegHelp\")\n        } else {\n            hideElements(\"#selfRegButton\")\n            hideElements(\"#selfRegHelp\")\n        }\n    },\n    get selfRegAllowed() {\n        return this._selfRegAllowed\n    },\n    \n    //---------------------------\n    _captchaRequired: false,\n    set captchaRequired(v) {\n        this._captchaRequired = v\n        if (v) {\n            showElements(\"#captcha\")\n        } else {\n            hideElements(\"#captcha\")\n        }\n    },\n    get captchaRequired() {\n        return this._captchaRequired\n    },\n\n    //---------------------------\n    _authRoles: null,\n    set authRoles(v) {\n        this._authRoles = v\n        if (this.isAdmin){\n            showElements('#usersTab')\n            showElements('#rolesTab')\n            showElements('#graphqlTest')\n            showElements('#btnNewApp')\n            showElements('#settingsButton')\n        } else {\n            hideElements('#usersTab')\n            hideElements('#rolesTab')\n            hideElements('#graphqlTest')\n            hideElements('#btnNewApp')\n            hideElements('#settingsButton')\n\n            // showPage('apps')\n        }\n        renderTemplateFile('mustache/apps.html', model, '.app-search-results')\n        \n    },\n    get authRoles() {\n        return this._authRoles\n    },\n    get isAdmin() {\n        if (!model.authRoles) return false\n        return model.authRoles.some(e => (e.rolename == \"authadmin\" || e.rolename == \"auditor\"))\n    },\n    \n    //---------------------------\n    _user: null,\n    set user(v) {\n        this._user = v\n        renderTemplateFile('mustache/user.html', model, '#userPage')\n    },\n    get user() {\n        return this._user\n    },\n    \n    //---------------------------\n    _app: null,\n    set app(v) {\n        this._app = v\n        renderTemplateFile('mustache/app.html', model, '#appPage')\n    },\n    get app() {\n        return this._app\n    },\n    \n    //---------------------------\n    _group: null,\n    set group(v) {\n        this._group = v\n        renderTemplateFile('mustache/group.html', model, '#groupPage')\n    },\n    get group() {\n        return this._group\n    },\n    \n    //---------------------------\n    _users: null,\n    set users(v) {\n        this._users = v\n        renderTemplateFile('mustache/users.html', model, '.user-search-results')\n    },\n    get users() {\n        return this._users\n    },\n    \n    //---------------------------\n    _apps: null,\n    set apps(v) {\n        this._apps = v\n        renderTemplateFile('mustache/apps.html', model, '.app-search-results')\n    },\n    get apps() {\n        return this._apps\n    },\n\n    //---------------------------\n    _groups: null,\n    set groups(v) {\n        this._groups = v\n        renderTemplateFile('mustache/groups.html', model, '.group-search-results')\n    },\n    get groups() {\n        return this._groups\n    },\n\n    //---------------------------\n    all_app_options: null,\n    all_user_options:null,\n    all_group_options:null,\n    \n    //---------------------------\n    _allApps: null,\n    set allApps(v) {\n        this._allApps = v\n        this.all_app_options = createOptions(v, \"appname\", \"description\", \"url\")\n        document.querySelector(\"#allAppsDataList\").innerHTML = this.all_app_options\n    },\n    get allApps() {\n        return this._allApps\n    },\n\n    //---------------------------\n    _allUsers: null,\n    set allUsers(v) {\n        this._allUsers = v\n        this.all_user_options = createOptions(v, \"username\", \"fullname\", \"email\")\n        document.querySelector(\"#allUsersDataList\").innerHTML = this.all_user_options\n    },\n    get allUsers() {\n        return this._allUsers\n    },\n\n    //---------------------------\n    _allGroups: null,\n    set allGroups(v) {\n        this._allGroups = v\n        console.debug('allGroups',v)\n        // this.all_groups_options = createOptions(v, \"groupsname\", \"description\", \"url\")\n        // document.querySelector(\"#allGroupsDataList\").innerHTML = this.all_groups_options\n    },\n    get allGroups() {\n        return this._allGroups\n    },\n\n    \n    //---------------------------\n    _app_user_roles: null,\n    set app_user_roles(v) {\n        this._app_user_roles = v\n        renderTemplateFile('mustache/app-user-roles.html', model, '.app-user-roles-results')\n    },\n    get app_user_roles() {\n        return this._app_user_roles\n    },\n\n    //---------------------------\n    _app_group_roles: null,\n    set app_group_roles(v) {\n        this._app_group_roles = v\n        renderTemplateFile('mustache/app-group-roles.html', model, '.app-group-roles-results')\n    },\n    get app_group_roles() {\n        return this._app_group_roles\n    },\n\n    //---------------------------\n    _user_group_roles: null,\n    set user_group_roles(v) {\n        this._user_group_roles = v\n        renderTemplateFile('mustache/user-group-roles.html', model, '.user-group-roles-results')\n    },\n    get user_group_roles() {\n        return this._user_group_roles\n    },\n\n    //---------------------------\n    _params: null,\n    set params(v) {\n        this._params = v\n        renderTemplateFile('mustache/params.html', model, '#paramsPage')\n        document.getElementById('appName').innerText = v ? v.app_name : '';\n    },\n    get params() {\n        return this._params\n    },\n\n    //---------------------------\n    _appstat: null,\n    set appstat(v) {\n        this._appstat = v\n        if (! document.getElementById('gauges')) return\n\n        document.getElementById('divSys').innerText = v.sys +' Mb'\n        document.getElementById('divAlloc').innerText = 'allocated: '+v.alloc +' Mb'\n        document.getElementById('divTotalAlloc').innerText = 'total allocated: '+v.total_alloc +' Mb'\n\n\n        drawGauge(\"req / day\", v.requests_per_day, 0,  \"divDay\")        // 10000\n        drawGauge(\"req / hour\", v.requests_per_hour, 0, \"divHour\")       // 1000\n        drawGauge(\"req / min\", v.requests_per_minute, 0, \"divMinute\")     // 100\n        drawGauge(\"req / sec\", v.requests_per_second, 0, \"divSecond\")      // 10\n    },\n    get appstat() {\n        return this._appstat\n    },\n\n \n    \n}\n\n\n\n// F U N C T I O N S  *********************************************************************************\n\n// function getListOptionProperty(inputId,propertyName) {\n//     var input = document.getElementById(inputId)\n//     if (!input) return\n//     var value = input.value\n//     var selector = `#${inputId}>option[value='${value}']`\n//     if (!selector) return\n//     var option = document.querySelector(selector)\n//     if (!option) return\n//     var value = option[propertyName]\n//     return value\n// }\n\n// prevent default\nfunction pd(event) {\n    if (event) event.preventDefault()\n}\n\n\nfunction createOptions(selectValues, keyProp, textProp1, textProp2) {\n    var output = []\n    selectValues && selectValues.forEach(function(value)\n    {\n      output.push(`<option id=\"${value.id}\" value=\"${value[keyProp]}\">${value[textProp1]} &nbsp;&nbsp;&nbsp; ${value[textProp2]?value[textProp2]:''}</option>`);\n    })\n    let optionText = output.join('')\n    return optionText\n}\n\n\nfunction highlightTab(tabid) {\n        removeClass('.tab', \"underlined\")\n        var tabid0 = tabid.split(\"/\")[0]\n        addClass('#'+tabid0+'Tab', \"underlined\")   \n}\n\n\nfunction showPage(pageid, dontpush){\n    stopGettingAppstat()\n\n    //распарсить pageidExtended\n    var a = pageid.split(\"/\")\n    var pageid0 = a[0]\n    var id = a[1]\n\n    highlightTab(pageid)\n    \n    hideElements('.page')\n    showElements('#'+pageid0+'Page')\n\n\n    // setting focus\n    var text = document.querySelector('#'+pageid0+'Page input[type=\"text\"]')\n    if(text) \n        text.focus()\n\n\n    if (!dontpush){\n        if (!history.state || history.state.pageid != pageid ){\n            history.pushState({pageid:pageid},pageid, \"#\"+pageid) \n        }\n    }\n\n    if (id) {\n        if (pageid0 == \"app\"){\n            getApp(id)\n        } \n        if (pageid0 == \"user\"){\n            getUser(id)\n        }\n        if (pageid0 == \"group\"){\n            getGroup(id)\n        }\n    }\n\n    if (pageid0 == 'params')\n        startGettingAppstat()\n\n    return false\n}\n\n\nfunction renderTemplateFile(templateFile, data, targetSelector) {\n    var cachedTemlpate = model.templatesCache[templateFile]\n    \n    if (cachedTemlpate) {\n        renderTemplate(cachedTemlpate) \n        // console.info(\"from cache:\",templateFile)\n        return\n    }\n    \n    fetch(templateFile).then(x => x.text()).then( t => {\n        model.templatesCache[templateFile]=t \n        renderTemplate(t)\n    })\n\n    function renderTemplate(template) {\n        var rendered = Mustache.render(template, data)\n        document.querySelector(targetSelector).innerHTML = rendered\n    }    \n\n}\n\n\nvar delayTimeout\nfunction delayFunc(f, delay=500) {\n   clearTimeout(delayTimeout) \n   delayTimeout = setTimeout(f, delay)  \n   return false \n}\n\n\nfunction searchApps() {\n    if (document.querySelector('#chkLocalSearch').checked) {\n        return delayFunc(searchAppsInModel, 100)\n    } else {\n        return delayFunc(formListAppSubmit)\n    }\n}\n\nfunction searchAppsInModel() {\n    if (!model.allApps) return\n    var text = document.querySelector(\"#formListApp input[name='search']\").value.trim().replace(' ','.*')\n    var r = new RegExp(text, 'i')\n    let found = model.allApps.filter((v)=>{\n        var s = Object.values(v).join(' ')\n        return r.test(s)\n    })\n    model.apps = found\n    return false   \n}\n\n\nfunction sortAppsBy(prop) {\n    if (!model._allApps) return false\n    model._allApps.sort( (a,b) => (a[prop]+a.appname)>(b[prop]+b.appname)? 1: -1)\n    model._apps.sort( (a,b) => (a[prop]+a.appname)>(b[prop]+b.appname)? 1: -1 )\n    model.apps = model._apps\n    return false\n}\n\n\nfunction searchUsers() {\n    if (document.querySelector('#chkLocalSearch').checked) {\n        return delayFunc(searchUsersInModel, 100)\n    } else {\n        return delayFunc(formListUserSubmit)\n    }\n}\n\n\nfunction searchUsersInModel() {\n    if (!model.allUsers) return\n    var text = document.querySelector(\"#formListUser input[name='search']\").value.trim().replace(' ','.*')\n    var r = new RegExp(text, 'i')\n    let found = model.allUsers.filter( (v) => r.test (Object.values(v).join(' ')) )\n    model.users = found\n    return false   \n}\n\n\nfunction sortUsersBy(prop, asStings = true) {\n    if (!model._allUsers) return false\n    if (asStings){\n        model._allUsers.sort( (a,b) => (a[prop]+a.username)>(b[prop]+b.username)? 1: -1)\n        model._users.sort( (a,b) => (a[prop]+a.username)>(b[prop]+b.username)? 1: -1 )\n    } else {\n        model._allUsers.sort( (a,b) => (a[prop])>(b[prop])? 1: -1)\n        model._users.sort( (a,b) => (a[prop])>(b[prop])? 1: -1 )\n    }\n    model.users = model._users\n    return false\n}\n\nfunction searchGroups() {\n    if (document.querySelector('#chkLocalSearch').checked) {\n        return delayFunc(searchGroupsInModel, 100)\n    } else {\n        return delayFunc(formListGroupSubmit)\n    }\n}\n\n\n\nfunction searchGroupsInModel() {\n    if (!model.allGroups) return\n    var text = document.querySelector(\"#formListGroup input[name='search']\").value.trim().replace(' ','.*')\n    var r = new RegExp(text, 'i')\n    let found = model.allGroups.filter( (v) => r.test (Object.values(v).join(' ')) )\n    model.groups = found\n    return false   \n}\n\n\nfunction sortGroupsBy(prop, asStings = true) {\n    if (!model._allGroups) return false\n    if (asStings){\n        model._allGroups.sort( (a,b) => (a[prop]+a.groupname)>(b[prop]+b.groupname)? 1: -1)\n        model._groups.sort( (a,b) => (a[prop]+a.groupname)>(b[prop]+b.groupname)? 1: -1 )\n    } else {\n        model._allGroups.sort( (a,b) => (a[prop])>(b[prop])? 1: -1)\n        model._groups.sort( (a,b) => (a[prop])>(b[prop])? 1: -1 )\n    }\n    model.groups = model._groups\n    return false\n}\n\n\nfunction errorMessage(errorElementID, errMsg) {\n    console.debug(errMsg)\n    if (errorElementID) {\n        document.getElementById(errorElementID).innerText = errMsg\n    }\n}\n\n// R E Q U E S T S  *******************************************************\n\nfunction doGraphQLRequest(query, responseHandler, errorElementID=\"loginError\") {\n    fetch(model.appurl+'/graphql', { \n        // headers: new Headers({cache: \"no-cache\"}),\n        method: 'POST', \n        credentials: 'include', \n        body: JSON.stringify({ query: query, variables: {} }) \n    })\n        .then(res => { \n            if (res.ok) {\n                return res.json();\n            }\n            new Error(res)\n        })\n        .then((res) => {\n            console.debug(\"doGraphQLRequest() result=\",res)\n            if (res.errors){\n                let errMsg = res.errors[0].message\n                errorMessage(errorElementID, errMsg)\n                return\n            }\n            responseHandler && responseHandler(res)\n        })\n        .catch( e =>  errorMessage(errorElementID, \"doGraphQLRequest: \" +e ))    \n    \n}\n\n\n// L O G I N  *****************************************************************************\n\nfunction loginGraphQLFormSubmit(event) {\n    if (event) event.preventDefault()\n    \n    let username = document.getElementById(\"loginUsername\").value\n    let password = document.getElementById(\"loginPassword\").value\n    let captcha =  document.getElementById(\"loginCaptcha\").value\n    let pin =  document.getElementById(\"loginPin\").value\n    if (username == \"\") {\n        errorMessage(\"loginError\", 'Заполните поле email')\n        return\n    }\n\n    isPinRequired(username)\n    \n\n    let query =`\n    query {\n        login(\n        username: \"${username}\",\n        password: \"${password}\",\n        captcha: \"${captcha}\",\n        pin: \"${pin}\"\n        )\n        }    \n    `\n    function onSuccess(res){\n        getLoginedUser()\n    }   \n    \n    doGraphQLRequest(query, onSuccess, \"loginError\")\n    clearLoginForm()\n    return false       \n}\n\n\n\nfunction logoutGraphQLFormSubmit(event) {\n    if (event) event.preventDefault()\n    var query =`\n    query {\n        logout {\n            message\n            email\n          }\n        }\n    `\n\n    function onSuccess(res){\n        model.loginedUser = null\n        model.oauth2email =\"\"\n        model.oauth2id =\"\"\n        model.oauth2name =\"\"\n\n        refreshApp()\n    }\n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n\nfunction isSelfRegAllowed(event) {\n    if (event) event.preventDefault()\n    var query =` query { is_selfreg_allowed }`\n\n    function onSuccess(res){\n        model.selfRegAllowed = res.data.is_selfreg_allowed\n    }\n       \n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\nfunction checkUserRequirements(event) {\n    if (event) event.preventDefault()\n    let username = document.getElementById(\"loginUsername\").value   \n    isCaptchaRequired(username)\n    isPinRequired(username)\n    return false \n}\n\n\nfunction isCaptchaRequired(username) {\n    var query =`  query { is_captcha_required(  username: \"${username}\" ) \n        {\n            is_required \n            path\n        } \n    } `\n\n    function onSuccess(res){\n        model.captchaRequired = res.data.is_captcha_required.is_required\n        if (model.captchaRequired) {\n            getNewCaptcha()\n            console.debug(\"Captcha IS required\")\n        }\n    }\n       \n    doGraphQLRequest(query, onSuccess)   \n}\n\n\nfunction isPinRequired(username) {\n    errorMessage(\"loginError\", \"\")\n    \n    var query =`  query { is_pin_required(  username: \"${username}\" ) \n        {\n            use_pin \n            pinrequired\n        } \n    } `\n\n    function onSuccess(res){\n        let r = res.data.is_pin_required;\n        console.debug(\"isPinRequired()->\", r);\n        (r.use_pin && r.pinrequired) ? showElements(\".pinclass\") : hideElements(\".pinclass\"); \n    }\n       \n    doGraphQLRequest(query, onSuccess)   \n}\n\n\n\n// function resetPassword(event) {\n//     if (event) event.preventDefault()\n    \n//     errorMessage(\"resetError\", \"\")\n\n//     let username = document.getElementById(\"loginUsername\").value\n\n//     var query =`\n//     mutation {\n//         generate_password(\n//         username: \"${username}\"\n//         ) \n//         }\n//     `\n//     function onSuccess(res){\n//         alert(res.data.generate_password)\n//         refreshApp()\n//     }   \n\n//     doGraphQLRequest(query, onSuccess, \"resetError\")\n//     return false       \n// }\n\nfunction resetPasswordRest(event) {\n    if (event) event.preventDefault()\n    errorMessage(\"resetError\", \"\")\n    let username = document.getElementById(\"loginUsername\").value\n    if (!username) {\n        errorMessage(\"resetError\", 'Заполните поле email')\n        return false\n    }\n    let adminurl = location.origin + location.pathname\n    let url = `${model.priv_origin}/reset_password?username=${username}&adminurl=${adminurl}&authurl=${model.priv_origin}`\n    fetch(url).then( r => r.json()).then(onSuccess).catch(onError)\n    \n    function onSuccess(res){\n        errorMessage(\"resetError\", res.error)\n        if (res.result) {\n             alert(res.result)\n        } \n    }\n\n    function onError(err){\n        errorMessage(\"resetError\", \"resetPasswordRest \" + err)\n    }\n\n    return false \n}\n\n\n\nfunction resetAuthenticator(event) {\n    if (event) event.preventDefault()\n    errorMessage(\"resetError\", \"\")\n    let username = document.getElementById(\"loginUsername\").value\n    if (!username) {\n        errorMessage(\"resetError\", 'Заполните поле email')\n        return false\n    }\n    let adminurl = location.origin + location.pathname\n    let url = `${model.priv_origin}/reset_authenticator?username=${username}&adminurl=${adminurl}&authurl=${model.priv_origin}`\n    fetch(url).then( r => r.json()).then(onSuccess).catch(onError)\n    \n    function onSuccess(res){\n        errorMessage(\"resetError\", res.error)\n        if (res.result) {\n             alert(res.result)\n        } \n    }\n\n    function onError(err){\n        errorMessage(\"resetError\", \"resetAuthenticator \"+err)\n    }\n\n    return false \n}\n\n\n\n// L O G I N E D   U S E R   **********************************************************************************************************************\n\n\nfunction getLoginedUser() {\n    model.loginedUser = null\n    var query =`\n    query {\n        get_logined_user {\n            description\n            email\n            fullname\n            username\n            disabled\n            id\n            pinhash\n            pinrequired\n            pinhash_temp  \n            emailhash\n            emailconfirmed    \n        }\n    }\n    `\n    \n    function onSuccess(res){\n        model.loginedUser = res.data.get_logined_user\n        getAuthRoles(model.loginedUser.username)\n        getUser(model.loginedUser.username)\n    } \n    \n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\nfunction getAuthRoles(username) {\n    model.authRoles = null\n\n    var query =`\n    query {\n        list_app_user_role(\n            appname: \"auth\",\n            username: \"${username}\"\n            ) {\n                rolename\n            }\n        }\n        `\n\n    function onSuccess(res){\n        model.authRoles = res.data.list_app_user_role\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n// P A R A M S  ***********************************************************************************************************************\n\n\nfunction getParams() {\n    model.params = null\n    var query =`\n    query {\n        get_params {\n            app_name\n            max_attempts\n            reset_time\n            selfreg\n            use_captcha\n            use_pin\n          }\n        }\n    `\n\n    function onSuccess(res){\n        var p = res.data.get_params\n        model.params = p\n        getAppstatRest()\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\nfunction setParams(event) {\n    if (event) event.preventDefault()\n    let selfreg =       document.querySelector(\"#formParams input[name='selfreg']\").checked\n    let use_captcha =   document.querySelector(\"#formParams input[name='use_captcha']\").checked\n    let use_pin =       document.querySelector(\"#formParams input[name='use_pin']\").checked\n    let max_attempts =  document.querySelector(\"#formParams input[name='max_attempts']\").value\n    let reset_time =    document.querySelector(\"#formParams input[name='reset_time']\").value\n    \n    var query =`\n    query {\n        set_params(\n        selfreg:      ${selfreg},\n        use_captcha:  ${use_captcha},\n        use_pin:      ${use_pin},\n        max_attempts: ${max_attempts},\n        reset_time:   ${reset_time}\n        ) {\n            max_attempts\n            reset_time\n            selfreg\n            use_captcha\n            use_pin\n          }\n        }\n    `\n\n    function onSuccess(res){\n        model.params = res.data.set_params\n        alert(\"params saving success\")\n    }\n\n    doGraphQLRequest(query, onSuccess, \"paramsError\")\n    return false       \n}\n\n\n// function getAppstat(event) {\n//     if (event) event.preventDefault()\n//     var query =`\n//     query {\n//         get_stat {\n//             alloc\n//             requests_per_day\n//             requests_per_hour\n//             requests_per_minute\n//             requests_per_second\n//             sys\n//             total_alloc\n//           }\n//         }\n//     `\n\n//     function onSuccess(res){\n//         var m = res.data.get_stat\n//         model.appstat = m\n//     } \n\n//     doGraphQLRequest(query, onSuccess, \"appstatError\")\n//     return false       \n// }\n\nfunction getAppstatRest(event) {\n    if (event) event.preventDefault()\n    getAppstatRest.counter = getAppstatRest.counter === undefined ? 0: getAppstatRest.counter+1\n    console.log(\"getAppstatRest.counter = \",getAppstatRest.counter)\n\n\n    fetch(model.appurl + \"/stat\").then(x => x.json())\n    .then( onSuccess )\n    .catch( err => {\n        console.log(\"fetch error:\",err)\n        return\n        }\n    )  \n\n    function onSuccess(res){\n        var m = res\n        model.appstat = m\n    } \n    return false       \n}\n\nmodel.statInterval = null\nfunction startGettingAppstat(){\n    clearInterval(model.statInterval)\n    getAppstatRest()\n    model.statInterval = setInterval(getAppstatRest, 3000)\n    console.log('startGettingAppstat')\n}\n\nfunction stopGettingAppstat(){\n    clearInterval(model.statInterval)\n    // console.log('stopGettingAppstat')\n}\n\n// U S E R S  ***********************************************************************************************************************\n\n\nfunction formListUserSubmit(event) {\n    if (event) event.preventDefault()\n    model.users = null\n    let search = document.querySelector(\"#formListUser input[name='search']\").value\n    \n    var query =`\n    query {\n        list_user(\n        search: \"${search}\",\n        order: \"fullname ASC\"\n        ) {\n            length\n            list {\n              description\n              email\n              fullname\n              username\n              disabled\n              id\n              pinhash\n              pinrequired\n              pinhash_temp   \n              emailhash\n              emailconfirmed    \n              }\n          }\n        }        \n    `\n    \n    function onSuccess(res){\n        model.users = res.data.list_user.list\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n\n\nfunction updateUser(event) {\n    if (event) event.preventDefault()\n    let id =  document.querySelector(\"#user-id\").innerText\n    // let old_username =  document.querySelector(\"#formUser input[name='old_username']\").value\n    // let username =      document.querySelector(\"#formUser input[name='username']\").value\n    let password =      document.querySelector(\"#formUser input[name='password']\").value\n    // let email    =      document.querySelector(\"#formUser input[name='email']\").value\n    let fullname =      document.querySelector(\"#formUser input[name='fullname']\").value\n    let description =   document.querySelector(\"#formUser *[name='description']\").value\n    let disabled =      document.querySelector(\"#formUser input[name='disabled']\").value\n    let pinrequired =   document.querySelector(\"#formUser input[name='pinrequired']\").checked\n    \n    var query =`\n    mutation {\n        update_user(\n        id: ${id}\n        password: \"${password}\",\n        fullname: \"${fullname}\",\n        description: \"${description}\",\n        disabled: ${disabled},\n        pinrequired: ${pinrequired}\n        ) {\n            description\n            email\n            fullname\n            username\n            disabled\n            id\n            pinhash\n            pinrequired\n            pinhash_temp      \n            emailhash\n            emailconfirmed    \n          }\n\n        }\n    `\n\n    function onSuccess(res){\n        alert(\"update_user success\")\n        refreshData()\n        model.user = res.data[\"update_user\"]\n        getUser(model.user.username)\n    }\n\n    doGraphQLRequest(query, onSuccess, \"userError\")\n    return false       \n}\n\n\nfunction createUser(event) {\n    if (event) event.preventDefault()\n    // let username =      document.querySelector(\"#formUser input[name='username']\").value\n    let email    =      document.querySelector(\"#formUser input[name='email']\").value\n    let password =      document.querySelector(\"#formUser input[name='password']\").value\n    let fullname =      document.querySelector(\"#formUser input[name='fullname']\").value\n    let description =   document.querySelector(\"#formUser *[name='description']\").value\n    let disabled =      document.querySelector(\"#formUser input[name='disabled']\").value\n    let pinrequired =   document.querySelector(\"#formUser input[name='pinrequired']\").checked\n    \n    var query =`\n    mutation {\n        create_user(\n        email: \"${email}\",\n        password: \"${password}\",\n        fullname: \"${fullname}\",\n        description: \"${description}\",\n        disabled: ${disabled},        \n        pinrequired: ${pinrequired},\n        ) {\n            description\n            email\n            fullname\n            username\n            disabled\n            id\n            pinhash\n            pinrequired \n            pinhash_temp       \n            emailhash\n            emailconfirmed    \n          }\n\n        }\n    `\n\n    function onSuccess(res){\n        alert(\"create_user success\")\n        refreshData()\n        model.user = res.data[\"create_user\"]\n        if (!model.logined) {\n            alert(`\"${model.user.username}\" is created.` )\n            showPage('login',true)\n        } else {\n            getUser(model.user.username)\n        }\n    }\n\n    doGraphQLRequest(query, onSuccess, \"userError\")\n    return false       \n}\n\n\nfunction getUser(username) {\n    model.user = null\n    var query =`\n    query {\n        get_user(\n        username: \"${username}\"\n        ) {\n            description\n            email\n            fullname\n            username\n            disabled\n            id\n            pinhash\n            pinrequired\n            pinhash_temp     \n            emailhash\n            emailconfirmed    \n          }\n        \n        list_app_user_role(\n        username: \"${username}\"\n        ) {\n            app_description\n            appname\n            rolename\n            username\n          }\n        \n        }\n\n    `\n\n    function onSuccess(res){\n        var u = res.data.get_user\n        u.apps = groupApps(res.data.list_app_user_role)\n        // render \n        model.user = u\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n\nfunction groupApps(list_app_user_role) {\n    if (!list_app_user_role) return []\n    \n    let gr = {}\n    for (let aur of list_app_user_role ){\n        if (!gr[aur.appname]) gr[aur.appname] =[]\n        gr[aur.appname].push(aur)\n    }\n\n    let arr = []\n\n    for (let [key, value] of Object.entries(gr)) {\n        let rec = {}\n        rec.appname =key\n        rec.app_description = value[0].app_description\n        rec.items = value\n        arr.push(rec)\n    }\n    return arr\n}\n\n\n\nfunction deleteUser(username) {\n    var query =`\n    mutation {\n        delete_user(\n        username: \"${username}\"\n        ) {\n            username\n          }\n        }\n    `\n    function onSuccess(res){\n        model.user = null\n        refreshData()\n        showPage('users')\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n// A P P S  *******************************************************************\n\nfunction formListAppSubmit(event) {\n    if (event) event.preventDefault()\n    model.apps = null\n    let search = document.querySelector(\"#formListApp input[name='search']\").value\n    var query =`\n    query {\n        list_app(\n        search: \"${search}\",\n        order: \"description ASC\"\n        ) {\n            length\n            list {\n              appname\n              description\n              url\n              rebase\n              public\n              sign\n            }\n          }\n        }    `\n\n    function onSuccess(res){\n        model.apps = res.data.list_app.list\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n\nfunction createApp(event) {\n    if (event) event.preventDefault()\n    let appname =     document.querySelector(\"#formApp input[name='appname']\"    ).value\n    let url =         document.querySelector(\"#formApp input[name='url']\"        ).value\n    let description = document.querySelector(\"#formApp input[name='description']\").value\n    let rebase =      document.querySelector(\"#formApp input[name='rebase']\"     ).value\n    let _public =     document.querySelector(\"#formApp input[name='public']\"     ).value\n    let sign =        document.querySelector(\"#formApp input[name='sign']\"       ).value\n    \n    var query =`\n    mutation {\n        create_app(\n        appname: \"${appname}\",\n        url: \"${url}\",\n        description: \"${description}\",\n        rebase: \"${rebase}\",\n        public: \"${_public}\",\n        sign: \"${sign}\"\n        ) {\n            description\n            appname\n            url\n            rebase\n            public\n            sign\n          }\n\n        }\n    `\n    function onSuccess(res){\n        alert(\"create_app success\")\n        refreshData()\n        model.app = res.data[\"create_app\"]\n        getApp(appname)\n    } \n\n    doGraphQLRequest(query, onSuccess, \"appError\")\n    return false       \n}\n\n\nfunction updateApp(event, appOperationName = 'create_app') {\n    if (event) event.preventDefault()\n    let old_appname = document.querySelector(\"#formApp input[name='old_appname']\"    ).value\n    let appname =     document.querySelector(\"#formApp input[name='appname']\"    ).value\n    let url =         document.querySelector(\"#formApp input[name='url']\"        ).value\n    let description = document.querySelector(\"#formApp input[name='description']\").value\n    let rebase =      document.querySelector(\"#formApp input[name='rebase']\"     ).value\n    let _public =     document.querySelector(\"#formApp input[name='public']\"     ).value\n    let sign =        document.querySelector(\"#formApp input[name='sign']\"       ).value\n    \n    var query =`\n    mutation {\n        update_app(\n        old_appname: \"${old_appname}\",\n        appname: \"${appname}\",\n        url: \"${url}\",\n        description: \"${description}\",\n        rebase: \"${rebase}\",\n        public: \"${_public}\",\n        sign: \"${sign}\"\n        ) {\n            description\n            appname\n            url\n            rebase\n            public\n            sign\n          }\n\n        }\n    `\n    function onSuccess(res){\n        alert(\"update_app success\")\n        refreshData()\n        model.app = res.data[\"update_app\"]\n        getApp(appname)\n    } \n\n    doGraphQLRequest(query, onSuccess, \"appError\")\n    return false       \n}\n\n\n\nfunction getApp(appname) {\n    model.app = null\n\n    var query =`\n    query {\n        get_app(\n        appname: \"${appname}\"\n        ) {\n            description\n            appname\n            url\n            rebase\n            public\n            sign\n          }\n        \n        list_app_user_role(\n        appname: \"${appname}\"\n        ) {\n            appname\n            rolename\n            user_fullname\n            user_disabled\n            username\n          }\n        \n        }\n\n    `\n\n    function onSuccess(res){\n        var a = res.data.get_app\n        a.users = groupUsers(res.data.list_app_user_role)\n        // render\n        model.app = a\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\nfunction groupUsers(list_app_user_role) {\n    let gr = {}\n    for (let aur of list_app_user_role ){\n        if (!gr[aur.username]) gr[aur.username] =[]\n        gr[aur.username].push(aur)\n    }\n\n    let arr = []\n\n    for (let [key, value] of Object.entries(gr)) {\n        let rec = {}\n        rec.username =key\n        rec.user_fullname = value[0].user_fullname\n        rec.items = value\n        arr.push(rec)\n    }\n    return arr\n}\n\n\n\nfunction deleteApp(appname) {\n    var query =`\n    mutation {\n        delete_app(\n        appname: \"${appname}\"\n        ) {\n            appname\n          }\n        }\n    `\n    function onSuccess(res){\n        model.app = null\n        refreshData()\n        showPage('apps') ;\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n// G R O U P S   *******************************************************************\n\nfunction formListGroupSubmit(event) {\n    if (event) event.preventDefault()\n    model.groups = null\n    let search = document.querySelector(\"#formListGroup input[name='search']\").value\n    var query =`\n    query {\n        list_group(\n        search: \"${search}\",\n        order: \"description ASC\"\n        ) {\n            length\n            list {\n              description\n              groupname\n              id\n           }\n          }\n        }    `\n\n    function onSuccess(res){\n        model.groups = res.data.list_group.list\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n\nfunction createGroup(event) {\n    if (event) event.preventDefault()\n    let groupname =     document.querySelector(\"#formGroup input[name='groupname']\").value\n    let description = document.querySelector(\"#formGroup input[name='description']\").value\n    \n    var query =`\n    mutation {\n        create_group(\n        groupname: \"${groupname}\",\n        description: \"${description}\"\n        ) {\n            description\n            groupname\n            id\n          }\n\n        }\n    `\n    function onSuccess(res){\n        alert(\"create_group success\")\n        refreshData()\n        model.group = res.data[\"create_group\"]\n        getGroup(model.group.id)\n    } \n\n    doGraphQLRequest(query, onSuccess, \"groupError\")\n    return false       \n}\n\n\nfunction updateGroup(event) {\n    if (event) event.preventDefault()\n    let groupname =     document.querySelector(\"#formGroup input[name='groupname']\"    ).value\n    let description = document.querySelector(\"#formGroup input[name='description']\").value\n    let id =      document.querySelector(\"#formGroup input[name='id']\"     ).value\n   \n    var query =`\n    mutation {\n        update_group(\n        id: ${id},\n        groupname: \"${groupname}\",\n        description: \"${description}\"\n        ) {\n            description\n            groupname\n            id\n          }\n\n        }\n    `\n    function onSuccess(res){\n        alert(\"update_group success\")\n        refreshData()\n        model.group = res.data[\"update_group\"]\n        getGroup(id)\n    } \n\n    doGraphQLRequest(query, onSuccess, \"groupError\")\n    return false       \n}\n\n\n\nfunction getGroup(group_id) {\n    model.group = null\n\n    var query =`\n    query {\n        get_group(\n        id: ${group_id}\n        ) {\n            description\n            groupname\n            id\n          }\n\n        list_group_app_role(\n        group_id:${group_id}\n        ) {\n            app_appname\n            app_description\n            app_id\n            app_url\n            group_description\n            group_groupname\n            group_id\n            rolename\n           }          \n                \n        }\n\n    `\n\n    // list_group_user_role(\n    //     group_id: ${group_id}\n    //     ) {\n    //         group_description\n    //         group_groupname\n    //         group_id\n    //         rolename\n    //         user_description\n    //         user_disabled\n    //         user_email\n    //         user_fullname\n    //         user_id\n    //       }\n\n\n\n    function onSuccess(res){\n        var group = res.data.get_group\n        group.apps = appsOfTheGroup(res.data.list_group_app_role)\n        // render\n        model.group = group\n    } \n\n    doGraphQLRequest(query, onSuccess, \"groupError\")\n    return false       \n}\n\n// Group array of records by fieldName.\n// Returns a map fieldName->array of records\nfunction groupByField(records, fieldName){\n    let values = {}\n    for (let rec of records ){\n        let val = rec[fieldName]\n        if (!values[val]) {\n            values[val] =[]\n        }\n        values[val].push(rec)\n    }\n    return values\n}\n\n\nfunction appsOfTheGroup(list_group_app_role) {\n    let apps = groupByField(list_group_app_role, 'app_id')\n\n    // преобразуем хэш в массив для отображения в mustache\n    let arr = []\n\n    for (let [key, value] of Object.entries(apps)) {\n        let rec = {}\n        rec.app_id =key\n        rec.group_id = value[0].group_id\n        rec.app_appname = value[0].app_appname\n        rec.app_description = value[0].app_description\n        rec.app_url = value[0].app_url\n        rec.items = value\n        arr.push(rec)\n    }\n    return arr\n}\n\n\n\nfunction deleteGroup(id) {\n    var query =`\n    mutation {\n        delete_group(\n        id: ${id}\n        ) {\n            description\n          }\n        }\n    `\n    function onSuccess(res){\n        alert(\"delete_group success\")\n        model.group = null\n        refreshData()\n        searchGroups(); \n        showPage('groups') ;\n    } \n\n    doGraphQLRequest(query, onSuccess, \"groupError\")\n    return false       \n}\n\n\n\n\n// A P P   U S E R   R O L E   **************************************************************************************************\n\nfunction getAllApps(event) {\n    if (event) event.preventDefault()\n    model.allApps = null\n    var query =`\n    query {\n        list_app(\n        order: \"appname ASC\"\n        ) {\n            length\n            list {\n              id\n              appname\n              description\n              url\n              rebase\n              public \n              sign\n            }\n          }\n        }    `\n\n    function onSuccess(res){\n        model.allApps = res.data.list_app.list\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\nfunction getAllUsers(event) {\n    if (event) event.preventDefault()\n    model.allUsers = null\n    var query =`\n    query {\n        list_user(\n        order: \"fullname ASC\"\n        ) {\n            length\n            list {\n              username\n              fullname\n              email\n              description\n              disabled\n              id\n              pinhash\n              pinrequired\n              pinhash_temp    \n              emailhash\n              emailconfirmed      \n              }\n          }\n        }    `\n\n    function onSuccess(res){\n        model.allUsers = res.data.list_user.list\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\nfunction getAllGroups(event) {\n    if (event) event.preventDefault()\n    model.allGroups = null\n    var query =`\n    query {\n        list_group(\n        order: \"groupname ASC\"\n        ) {\n            length\n            list {\n              groupname\n              description\n              id\n            }\n          }\n        }    `\n\n    function onSuccess(res){\n        model.allGroups = res.data.list_group.list\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\n\nfunction formListRoleSubmit(event) {\n    if (event && event.preventDefault ) event.preventDefault()\n    model.app_user_roles = null\n    let appname =  document.getElementById(\"allApps\").value\n    let username = document.getElementById(\"allUsers\").value\n    if (!appname || !username) \n        return\n\n    var query =`\n    query {\n        list_app_user_role(\n        appname: \"${appname}\",\n        username: \"${username}\"\n        ) {\n            rolename\n          }\n        }        \n        `\n\n    function onSuccess(res){\n        model.app_user_roles = res.data.list_app_user_role\n    } \n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n\nfunction modifyRole(action,appname,username,rolename, onsuccess ) {\n    if (!appname || !username || !rolename) return\n\n    var query =`\n    mutation {\n        ${action}_app_user_role(\n        appname: \"${appname}\",\n        username: \"${username}\",\n        rolename: \"${rolename}\"\n        ) {\n            rolename\n            appname\n            username\n          }\n        }\n    `\n    function onSuccess(res){\n        if (onsuccess) onsuccess()\n    }\n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\nfunction modifyGroupAppRole(action,group_id,app_id,rolename, onsuccess ) {\n    if (!group_id || !app_id || !rolename) \n        return\n    var query =`\n    mutation {\n        ${action}_group_app_role(\n        group_id: ${group_id},\n        app_id: ${app_id},\n        rolename: \"${rolename}\"\n        ) {\n            app_appname\n            app_description\n            app_id\n            app_url\n            group_description\n            group_groupname\n            group_id\n            rolename\n          }\n        }\n    `\n    function onSuccess(res){\n        if (onsuccess) onsuccess()\n    }\n\n    doGraphQLRequest(query, onSuccess)\n    return false       \n}\n\n// works when input values on roles page change\nfunction refreshRoles() {\n    let allUsersValue = document.getElementById(\"allUsers\").value\n    if (allUsersValue) {\n        let ui = document.querySelector(`#allUsersDataList>option[value='${allUsersValue}']`).innerText\n        document.getElementById('userInfo').innerText = ui   \n    }\n\n    let allAppsValue = document.getElementById(\"allApps\").value\n    if (allAppsValue) {\n        let ai = document.querySelector(`#allAppsDataList>option[value='${allAppsValue}']`).innerText\n        document.getElementById('appInfo').innerText = ai\n    }\n\n    if (allUsersValue && allAppsValue) \n        formListRoleSubmit() \n}\n\n\nfunction filterRows(selector, value ){\n    var v = value.toLowerCase()\n    var rows = document.querySelectorAll(selector)\n    rows.forEach(e => {\n        var txt = e.innerText.toLowerCase()\n        if (txt.indexOf(v) == -1) {\n            e.classList.add(\"hidden\")\n        } else {\n            e.classList.remove(\"hidden\")\n        }\n    });\n}\n\nfunction toggleElements(selector) {\n    document.querySelectorAll(selector).forEach(e => e.classList.toggle(\"hidden\"));\n}\n\nfunction hideElements(selector) {\n    document.querySelectorAll(selector).forEach(e => e.classList.add(\"hidden\"));\n}\n\n\nfunction showElements(selector) {\n    document.querySelectorAll(selector).forEach(e => e.classList.remove(\"hidden\"));\n}\n\nfunction addClass(selector, classname) {\n        document.querySelectorAll(selector).forEach(e => e.classList.add(classname));\n}\n\nfunction removeClass(selector, classname) {\n    document.querySelectorAll(selector).forEach(e => e.classList.remove(classname));\n}\n\n\nfunction hidePassword() {\n    document.querySelector(\"#formUser input[name='password']\").setAttribute('type','password')\n}\n\nfunction showPassword() {\n    document.querySelector(\"#formUser input[name='password']\").setAttribute('type','text')\n}\n\nfunction removeQueryStringFromBrowserURL() {\n    let url = document.location.href\n    let url1 = url.replace(/\\?.*/, '')\n    let url2 = url1+\"?url=\"+model.appurl\n    history.replaceState(null,null,url2)   \n}\n\nfunction newPassword (n, numbers=false) {\n    let pickSymbol =(s) => s[Math.floor(Math.random()*s.length)]\n    var symbolSets =numbers? [\"0123456789\"]:[\"bcdfghjklmnpqrstvwxz\",\"aeiou\"] \n    var password = ''\n    for (let i=0; i<n; i++){\n        password += pickSymbol(symbolSets[i%symbolSets.length])\n    }\n    return password\n}\n\n\nfunction generatePassword() {\n    document.querySelector(\"#formUser input[name='password']\").value = newPassword(9)\n}\n\nfunction generatePinHash() {\n    let hash = (window.crypto && window.crypto.randomUUID) ? window.crypto.randomUUID() : newPassword(20,true);\n    document.querySelector(\"#formUser input[name='pinhash_temp']\").value = hash;\n    setPinUrl();\n}\n\nfunction setPinUrl(){\n    let input = document.querySelector(\"#formUser input[name='pinhash_temp']\")\n    let hash = input.value\n    hash = hash.replaceAll(\" \",\"\")\n    input.value = hash\n    // let url = `/set-authenticator.html#username=${model.user.username}&hash=${model.user.pinhash_temp}&authurl=${model.appurl}`\n    // let link = document.getElementById('newPinUrl')\n    // link.innerText = url\n    // link.href = url\n    document.getElementById('pinUrlContainer').style.display= \"none\"\n}\n\nfunction buildSocialIcons(url) {\n        fetch(url).then(x => x.json())\n        .then( t => renderOauthProvidersJSON(t) )\n        .catch( err => {\n            console.log(\"fetch error:\",err)\n            return\n            }\n        )  \n}\n\nfunction renderOauthProvidersJSON(jsn) {\n    let el = document.getElementById('socialIcons')\n    \n    if (!el) return\n    \n    el.innerHTML = ''\n    let icons = []\n    for (let [k,v] of Object.entries(jsn) ) {\n        icons.push(`\n        <div class=\"social-element\">\n        <a class=\"button button-clear\" title=\"login via ${k}\" href=\"${model.appurl + v[0]}\">\n        ${k}\n        <br>\n        <img class=\"social-icon\" src=\"images/${k}.svg\">\n        </a>\n        <!--\n        <br>\n        <a class=\"social-logout\" title=\"logout from ${k}\" href=\"${model.appurl + v[1]}\">logout</a>\n        -->\n        </div>\n        \n        \n        `)\n    }\n    \n    \n    if (icons.length > 0){\n        el.innerHTML = '<div class=\"socialHeader\">войти через социальную сеть</div>' + icons.join(' ')\n        showElements(\"#selfRegHelpText\")\n        removeClass('#socialIcons', 'transparent')\n    } else {\n        hideElements(\"#selfRegHelpText\")\n    }\n}\n\n\n\nfunction getNewCaptcha() {\n    let uri = model.appurl+\"/captcha?\"+ new Date().getTime()\n    document.getElementById(\"captchaImg\").src = uri\n    return false\n}\n\n\n// G O O G L E   C H A R T S  ***************************************************************\n\nvar gauges = {}\n\nfunction drawGauge(title, val, maxV, containerID) {\n\n    if (!google) return\n    var container = document.getElementById(containerID)\n    if (! container) return\n\n    if (! gauges[title]) {\n        gauges[title]={}\n        gauges[title].data = google.visualization.arrayToDataTable([['Label', 'Value'], [title, 0]])\n    }\n    if (container.innerHTML == \"\"){\n        gauges[container]=container\n        gauges[title].chart = new google.visualization.Gauge(container)\n        console.log(\"Redraw gauge container:\", containerID)\n    }\n\n    // set values\n    gauges[title].data.setValue(0, 1, val)\n\n    let maxVal = maxV ? maxV: getUpperLimit(val)\n    var options = {\n        // width: 120,\n        height:  120, \n        animation:{\n            duration: 700\n        },\n        greenFrom:0, greenTo: maxVal*0.2,\n        yellowFrom: maxVal*0.8, yellowTo: maxVal*0.9,\n        redFrom: maxVal*0.9, redTo: maxVal,\n        minorTicks: 5,\n        // redColor: '#E10098',\n        // greenColor: 'cyan',\n        max: maxVal\n    }\n\n    // draw the chart\n    gauges[title].chart.draw(gauges[title].data, options)\n}\n\n\nfunction getUpperLimit(n) {\n    var lim = 10\n    while (n > lim) lim *= 10\n    return lim\n}\n\n// **********************************************************************************************\n// **********************************************************************************************\n// **********************************************************************************************\n\n\nfunction clearLoginForm() {\n    document.getElementById(\"loginUsername\").value = \"\"\n    document.getElementById(\"loginPassword\").value = \"\"\n    document.getElementById(\"loginCaptcha\").value = \"\"\n    document.getElementById(\"loginPin\").value = \"\"\n    document.getElementById(\"loginError\").innerText = \"\"\n    document.getElementById(\"socialLoginError\").innerHTML = \"\"\n    document.getElementById(\"oauth2email\").innerHTML = \"\"\n}\n\n\nfunction logout() {\n    logoutGraphQLFormSubmit()\n    clearLoginForm()\n    showPage('login',true)\n    isSelfRegAllowed()\n    model.captchaRequired = false\n    return false\n}\n\n\n// refreshData() если пользователь залогинен наполняет модель данными,\n// в противном случае или обнуляет модель.\nfunction refreshData() {\n    if (model.logined) {\n        getAllApps()\n        getAllUsers()\n        getAllGroups()\n        formListAppSubmit()\n        formListUserSubmit()  \n        formListGroupSubmit()  \n    } else {\n        // nullify model's inner props\n        for (const k of Object.keys(model)) {\n            if (k.startsWith('_')) {\n                model[k] = null\n            }\n        }\n        isSelfRegAllowed()\n   }    \n}\n\nfunction getCurrentPageID(){\n    var p = location.hash.slice(1)\n    return (!p || p.includes('=')) ? 'apps' : p\n}\n\n// refreshApp обновляет данные модели и GUI\nfunction refreshApp() {\n    \n    refreshData()\n    \n    if (model.logined) {\n        let page = getCurrentPageID()\n        showPage(page) \n        showElements('#menu')     \n        hideElements('#menuUnlogined')     \n    } else {\n        showPage('login',true)\n        hideElements('#menu')\n        showElements('#menuUnlogined')\n    }  \n    // предзагружаем шаблоны страниц\n    renderTemplateFile('mustache/group.html', model, '#groupPage')\n    renderTemplateFile('mustache/app.html', model, '#appPage')\n    renderTemplateFile('mustache/user.html', model, '#userPage')\n}\n\n\n\nwindow.onhashchange = function(event) {\n    console.debug(\"onhashchange \", event)\n    var newpage = event.newURL.split('#')[1]\n    if (newpage) \n        showPage(newpage)\n}\n\n\nfunction setAppParams(){\n    model.oauth2email = model.urlParams.get('oauth2email') || ''\n    model.oauth2name = model.urlParams.get('oauth2name') || ''\n    model.oauth2id = model.oauth2email.replace(/@.*/,'')\n    document.getElementById('oauth2email').innerHTML = model.oauth2email\n\n    var url = model.urlParams.get('url')\n    var css = model.urlParams.get('css')\n    var oauth2error = model.urlParams.get('oauth2error')\n    var alrt = model.urlParams.get('alert')\n    if (alrt) alert(alrt)\n    document.getElementById('socialLoginError').innerHTML = oauth2error\n    if (css) \n        document.getElementById('theme').href = css\n    model.appurl = url ? url : 'https://auth-proxy.rg.ru'\n    removeQueryStringFromBrowserURL()\n    //?\n    model.captchaRequired = false\n}\n\n\n\nfunction init() {\n    renderTemplateFile('mustache/params.html', model, '#paramsPage')\n    google.charts.load('current', {'packages':['gauge']})\n    google.charts.setOnLoadCallback(getAppstatRest)\n    setAppParams()\n    getLoginedUser()\n    refreshApp()   \n    getParams()   \n}\n\n\n// O N   P A G E   L O A D  ****************************************************************************************\n\ninit()\n"],"names":["delayTimeout","model","oauth2email","oauth2name","oauth2id","priv_origin","appurl","v","this","document","getElementById","innerHTML","buildSocialIcons","href","templatesCache","logined","_loginedUser","urlParams","URLSearchParams","window","location","search","loginedUser","innerText","username","refreshApp","_selfRegAllowed","selfRegAllowed","showElements","hideElements","_captchaRequired","captchaRequired","_authRoles","authRoles","isAdmin","renderTemplateFile","some","e","rolename","_user","user","_app","app","_group","group","_users","users","_apps","apps","_groups","groups","all_app_options","all_user_options","all_group_options","_allApps","allApps","createOptions","querySelector","_allUsers","allUsers","_allGroups","allGroups","console","debug","_app_user_roles","app_user_roles","_app_group_roles","app_group_roles","_user_group_roles","user_group_roles","_params","params","app_name","_appstat","appstat","sys","alloc","total_alloc","drawGauge","requests_per_day","requests_per_hour","requests_per_minute","requests_per_second","pd","event","preventDefault","selectValues","keyProp","textProp1","textProp2","output","forEach","value","push","id","join","highlightTab","tabid","removeClass","addClass","split","showPage","pageid","dontpush","stopGettingAppstat","a","pageid0","text","focus","history","state","pushState","getApp","getUser","getGroup","startGettingAppstat","templateFile","data","targetSelector","cachedTemlpate","renderTemplate","template","rendered","Mustache","render","fetch","then","x","t","delayFunc","f","delay","clearTimeout","setTimeout","searchApps","checked","searchAppsInModel","formListAppSubmit","trim","replace","r","RegExp","found","filter","s","Object","values","test","sortAppsBy","prop","sort","b","appname","searchUsers","searchUsersInModel","formListUserSubmit","sortUsersBy","asStings","searchGroups","searchGroupsInModel","formListGroupSubmit","sortGroupsBy","groupname","errorMessage","errorElementID","errMsg","doGraphQLRequest","query","responseHandler","method","credentials","body","JSON","stringify","variables","res","ok","json","Error","errors","message","catch","loginGraphQLFormSubmit","password","captcha","pin","isPinRequired","getLoginedUser","clearLoginForm","logoutGraphQLFormSubmit","isSelfRegAllowed","is_selfreg_allowed","checkUserRequirements","isCaptchaRequired","is_captcha_required","is_required","getNewCaptcha","is_pin_required","use_pin","pinrequired","resetPasswordRest","adminurl","origin","pathname","url","error","result","alert","err","resetAuthenticator","get_logined_user","getAuthRoles","list_app_user_role","getParams","p","get_params","getAppstatRest","setParams","set_params","counter","undefined","log","m","clearInterval","statInterval","setInterval","list_user","list","updateUser","refreshData","createUser","u","get_user","groupApps","gr","aur","arr","key","entries","rec","app_description","items","deleteUser","list_app","createApp","description","rebase","_public","sign","updateApp","appOperationName","old_appname","get_app","groupUsers","user_fullname","deleteApp","list_group","createGroup","updateGroup","group_id","get_group","appsOfTheGroup","list_group_app_role","groupByField","records","fieldName","val","app_id","app_appname","app_url","deleteGroup","getAllApps","getAllUsers","getAllGroups","formListRoleSubmit","modifyRole","action","onsuccess","modifyGroupAppRole","refreshRoles","allUsersValue","ui","allAppsValue","ai","filterRows","selector","toLowerCase","querySelectorAll","indexOf","classList","add","remove","toggleElements","toggle","classname","hidePassword","setAttribute","showPassword","removeQueryStringFromBrowserURL","url2","replaceState","newPassword","n","numbers","pickSymbol","Math","floor","random","length","symbolSets","i","generatePassword","generatePinHash","hash","crypto","randomUUID","setPinUrl","input","replaceAll","style","display","renderOauthProvidersJSON","jsn","el","icons","k","uri","Date","getTime","src","gauges","title","maxV","containerID","google","container","visualization","arrayToDataTable","chart","Gauge","setValue","maxVal","getUpperLimit","options","height","animation","duration","greenFrom","greenTo","yellowFrom","yellowTo","redFrom","redTo","minorTicks","max","draw","lim","logout","keys","startsWith","getCurrentPageID","slice","includes","setAppParams","get","css","oauth2error","alrt","init","charts","load","packages","setOnLoadCallback","onhashchange","newpage","newURL"],"mappings":"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"}